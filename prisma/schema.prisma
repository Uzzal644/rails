generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String          @id @default(cuid())
  name                    String
  email                   String?         @unique
  emailVerified           Boolean?        @default(false)
  image                   String?
  accounts                Account[]
  checkListItems          CheckListItem[]
  comments                Comment[]
  createdIssues           Issue[]         @relation("createdBy")
  leadProjects            Project[]
  sessions                Session[]
  issue                   Issue[]
  userActions             UserActions[]
  projects                Project[]       @relation("projectMembers")
  defaultAssigneeProjects Project[]       @relation("defaultAssignee")
  workspace               Workspace[]     @relation("createdBy")
  Workspace               Workspace?      @relation(fields: [workspaceId], references: [id])
  workspaceId             String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  shortName   String
  description String?
  website     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  members     User[]
  projects    Project[]
  createdBy   User      @relation("createdBy", fields: [createdById], references: [id])
  createdById String
}

model Project {
  id                String        @id @default(cuid())
  name              String
  createdAt         DateTime      @default(now())
  projectType       ProjectType
  viewType          ViewType      @default(KANBAN_BOARD)
  status            ProjectStatus @default(ACTIVE)
  projectLeadId     String
  projectLead       User          @relation(fields: [projectLeadId], references: [id])
  userActions       UserActions[]
  workflows         WorkFlow[]
  members           User[]        @relation("projectMembers")
  defaultAssigneeId String?
  defaultAssignee   User?         @relation("defaultAssignee", fields: [defaultAssigneeId], references: [id])
  labels            Label[]
  Workspace         Workspace?    @relation(fields: [workspaceId], references: [id])
  workspaceId       String?
}

model WorkFlow {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  index     Int
  issue     Issue[]
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Label {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String
  issueId   String?
  issue     Issue?   @relation(fields: [issueId], references: [id])
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Issue {
  id           String      @id @default(cuid())
  title        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  index        Int
  createdById  String
  workFlowId   String
  description  String?
  flagged      Boolean     @default(false)
  dueDate      DateTime?
  issueId      String?
  checkLists   CheckList[]
  comments     Comment[]
  createdBy    User        @relation("createdBy", fields: [createdById], references: [id])
  issue        Issue?      @relation("linkedIssues", fields: [issueId], references: [id])
  linkedIssues Issue[]     @relation("linkedIssues")
  workFlow     WorkFlow    @relation(fields: [workFlowId], references: [id], onDelete: Cascade)
  labels       Label[]
  assignees    User[]
}

model Comment {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  issueId     String
  createdById String
  message     String
  createdBy   User     @relation(fields: [createdById], references: [id])
  issue       Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
}

model CheckList {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  title     String
  issueId   String?
  issue     Issue?          @relation(fields: [issueId], references: [id], onDelete: Cascade)
  items     CheckListItem[]
}

model CheckListItem {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  checkListId  String
  title        String
  checked      Boolean   @default(false)
  dueDate      DateTime?
  assignedToId String?
  assignedTo   User?     @relation(fields: [assignedToId], references: [id])
  checkList    CheckList @relation(fields: [checkListId], references: [id], onDelete: Cascade)
}

model UserActions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  action    Action
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProjectType {
  KANBAN
  SCRUM
}

enum ViewType {
  LIST
  KANBAN_BOARD
  TABLE
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

enum Action {
  CREATED_PROJECT
  UPDATED_PROJECT
  DELETED_PROJECT
  CREATED_ISSUE
  UPDATED_ISSUE
  DELETED_ISSUE
  CREATED_COMMENT
  UPDATED_COMMENT
  DELETED_COMMENT
  CREATED_CHECKLIST
  UPDATED_CHECKLIST
  DELETED_CHECKLIST
  CREATED_CHECKLISTITEM
  UPDATED_CHECKLISTITEM
  DELETED_CHECKLISTITEM
  CREATED_LABEL
  UPDATED_LABEL
  DELETED_LABEL
  CREATED_WORKFLOW
  UPDATED_WORKFLOW
  DELETED_WORKFLOW
  CREATED_USER
  UPDATED_USER
  DELETED_USER
  ASSIGNED_USER_TO_ISSUE
  UNASSIGNED_USER_FROM_ISSUE
  ASSIGNED_USER_TO_CHECKLISTITEM
  UNASSIGNED_USER_FROM_CHECKLISTITEM
  ADDED_USER_TO_PROJECT
  REMOVED_USER_FROM_PROJECT
  ADDED_LABEL_TO_ISSUE
  REMOVED_LABEL_FROM_ISSUE
  ADDED_A_DEADLINE_TO_ISSUE
  REMOVED_DEADLINE_FROM_ISSUE
  ADDED_A_DEADLINE_TO_CHECKLISTITEM
  REMOVED_DEADLINE_FROM_CHECKLISTITEM
  ADDED_A_CHECKLIST_TO_ISSUE
  REMOVED_A_CHECKLIST_FROM_ISSUE
}
